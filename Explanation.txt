For requirement one, I decided to use Bubble Sort, because depending on the size of the run length, there might be some long strings of sorted data that just isn't as large as the run_size specified. In that case, Bubble Sort is nice because it stops running if the array is sorted earlier which is very possible given the circumstances. 

When comparing hybrid sort and merge sort, merge sort always seems to be faster. As the run_size is decreased, they begin to get closer to the same run time, which makes sense since the array will be broken into smaller chunks and the portion that is bubble sorted won't be very large compared to if the run_size was larger. Once all of the runs are sorted, then the running time of the two will be similar since they both are merging subarrays (though hybrid sort will have fewer sub arrays to merge). When the run_size is large however, there will be much larger runs that need to be Bubble Sorted whcih will bloat the run time, as Bubble Sort is much less efficient than merge sort. The way I implemented this program may also contribute to a longer runtime, since I created objects for the runs and methods to access their data. The repeated calling of these methods might contribute to a slightly inflated runtime as opposed to a different implementation. 

Even though it's slightly slower than merge sort, Hybrid Sort doesn't have any recursive function calls and makes fewer extra arrays in memory since the merge function is called fewer times; in these ways it could be superior to merge sort as it is potentially less memory intensive, though I don't have any empirical proof to back this up.